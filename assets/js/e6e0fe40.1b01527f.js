"use strict";(self.webpackChunkarpit_blog=self.webpackChunkarpit_blog||[]).push([[3189],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=l(t),h=o,f=d["".concat(i,".").concat(h)]||d[h]||p[h]||s;return t?r.createElement(f,u(u({ref:n},c),{},{components:t})):r.createElement(f,u({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,u=new Array(s);u[0]=d;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,u[1]=a;for(var l=2;l<s;l++)u[l]=t[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5165:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return h},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=t(3117),o=t(102),s=(t(7294),t(3905)),u=["components"],a={},i=void 0,l={unversionedId:"DSA/Stacks & Queues",id:"DSA/Stacks & Queues",title:"Stacks & Queues",description:"Stacks",source:"@site/docs/DSA/3. Stacks & Queues.md",sourceDirName:"DSA",slug:"/DSA/Stacks & Queues",permalink:"/docs/DSA/Stacks & Queues",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DoublyLinkedList",permalink:"/docs/DSA/DoublyLinkedList"},next:{title:"Trees",permalink:"/docs/DSA/Trees"}},c={},p=[{value:"Stacks",id:"stacks",level:2},{value:"Queues",id:"queues",level:2}],d={toc:p};function h(e){var n=e.components,a=(0,o.Z)(e,u);return(0,s.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"stacks"},"Stacks"),(0,s.kt)("p",null,"Stacks usually have these two methods"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"push "),(0,s.kt)("li",{parentName:"ol"},"pop")),(0,s.kt)("p",null,"Because of the way it is, no other method like replace , insert,etc makes sense here"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",alt:"stacks",src:t(8695).Z,width:"302",height:"540"})),(0,s.kt)("p",null,"and you can say thank you to god, being JS developer, you already know these two methods are present in Arrays."),(0,s.kt)("p",null,"So we will be using linkedlist to create the stack, In linked list we had haed and tail, here we will have top and bottom.\nbut you know what - we dont need bottom, as its fixed and cannot be moved"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Javascript"},"class Node {\n     constructor(value){\n         this.value = value\n         this.next = null\n     }\n }\n \n class Stack {\n     constructor(value) {\n         const newNode = new Node(value)\n         this.top = newNode\n         this.length = 1\n     }\n \n     push(value) {\n         const newNode = new Node(value)\n         if(this.length === 0) {\n             this.top = newNode\n         } else {\n             newNode.next = this.top\n             this.top = newNode\n         }\n         this.length++\n         return this \n     }\n \n     pop() {\n         if(this.length === 0) return undefined\n         let temp = this.top\n         this.top = this.top.next\n         temp.next = null\n         this.length--\n         return temp\n     }\n }\n \n let myStack = new Stack(7)\n myStack.push(23)\n myStack.push(3)\n myStack.push(11)\n\n")),(0,s.kt)("h2",{id:"queues"},"Queues"),(0,s.kt)("p",null,"When bottom of the stack (tennis ball pack) breaks due to heavy load, you keep it on the floor, making it a queue."),(0,s.kt)("p",null,"When you get in the line to buy ticket, it's a queue."),(0,s.kt)("p",null,"For arrays push & pop is o(1) but unshift & shift o(n)\nIn LinkedList, shift , unshift is o(1) and pop is o(n)\nIn queues, if you design carefully, you get both in o(1) you need to add from one end, remove from other."),(0,s.kt)("p",null,"FIFO"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-Javascript"},"class Node {\n     constructor(value){\n         this.value = value\n         this.next = null\n     }\n }\n \n class Queue {\n     constructor(value) {\n         const newNode = new Node(value)\n         this.first = newNode\n         this.last = newNode\n         this.length = 1\n     }\n \n     enqueue(value) {\n         const newNode = new Node(value)\n         if (this.length === 0) {\n             this.first = newNode\n             this.last = newNode\n         } else {\n             this.last.next = newNode\n             this.last = newNode\n         }\n         this.length++\n         return this\n     }\n \n      dequeue() {\n         if(this.length === 0) return undefined\n         let temp = this.first\n         if(this.length === 1) {\n             this.first = null\n             this.last = null\n         } else {\n             this.first = this.first.next\n             temp.next = null\n         } \n         this.length--\n         return temp\n     }   \n }\n \n let myQueue = new Queue(11)\n myQueue.enqueue(3)\n myQueue.enqueue(23)\n myQueue.enqueue(7)\n")))}h.isMDXComponent=!0},8695:function(e,n,t){n.Z=t.p+"assets/images/stack-9298e5952307f8a997fd571aa84d370f.png"}}]);